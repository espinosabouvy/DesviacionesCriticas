q()
install_from_swirl("Statistical Inference")
library(swirl)
install_from_swirl("Statistical Inference")
swirl()
q()
library(swirl)
swirl()
x <- 2:5
p <- c(.1,.2,.3,.4)
plot(x,p)
var(x,p)
var(p,x)
rbind(x,p)
rnorm(100,100,10)
quantile(rnorm(100,100,10), probs = .95)
install.packages("tidyverse")
library(tidyverse)
library(swirl)
swirl()
fit <- lm
fit <- lm(child~parent, data = galton)
sqrt(sum(fit$residuals)/(n-2))
sqrt(sum(fit$residuals^2)/(n-2))
summary(fit)$sigma
deviance(fit)/(n-2)
sqrt(deviance(fit)/(n-2))
mu <- mean(galton$child)
Stot <- sum((galton$child - mu)^2)
sTot <- sum((galton$child-mu)^2)
rm("Stot")
sRes <- deviance(fit)
1- sRes/sTot
summary(fit)$r.squared
cor(galton$child, galton$parent)^2
ones <- rep(1, nrow(galton))
lm(child~ones + parents-1, galton)
lm(child~ones + parent-1, galton)
lm(child~parent, galton)
lm(child ~ 1, galton)
head(trees)
fit <- lm(volume ~ Girth + Height + Constant - 1, trees)
fit <- lm(Volume ~ Girth + Height + Constant - 1, trees)
trees2 <- eliminate("Girth", trees)
head(trees2)
fit2 <- lm(Volume ~ Height + Constant - 1, trees2)
lapply(list(fit, fit2), coef)
lm(Fertility~., data = swiss)
all <- lm(Fertility ~ ., swiss)
summary(all)
lm(Fertility~agriculture, data = swiss)
lm(Fertility~Agriculture, data = swiss)
summary(lm(Fertility ~ Agriculture, swiss))
cor(swiss$Examination, swiss$Education)
cor(swiss$Agriculture, swiss$Education)
makelms()
ec <- sum(swiss$Examination+swiss$Catholic)
ec <- swiss$Examination+swiss$Catholic
efit <- lm(Fertility~.+ec,data = swiss)
summary(efit)
all$coefficients-efit$coefficients
library(swirl)
swirl()
rgp1()
rgp2()
head(swiss)
md1 <- lm(Fertility~., swiss)
mdl <- lm(Fertility~., swiss)
vif(mdl)
mdl2 <- lm(Fertility~.-Examination, swiss)
vif(mdl2)
x1c <- simbias()
apply(x1c, 1, mean)
fit1 <- lm(Fertility~Agriculture, swiss)
fit3 <- lm(Fertility~Agriculture+Examination+Education, swiss)
anova(fit1, fit3)
deviance(fit3)
d <- deviance(fit3)/43
n <- (deviance(fit1)-deviance(fit3))/2
n/d
pf(n/d,2,43,lower.tail = FALSE)
shapiro.test(fit3$residuals)
anova(fit1, fit3, fit5, fit6)
View(ravenData)
mdl <- glm(ravenWinNum~ravenScore, family = "binomial", ravenData)
lodds <- predict(mdl, data.frame(ravenScore=c(0,3,6)))
exp(lodds)/(1+exp(lodds))
summary(mdl)
exp(confint(mdl))
anova(mdl)
qchisq(0.95,1)
var(rpois(1000,50))
head(hits)
class(hits$date)
as.integer(head(hits$date))
mdl <- glm(visits~date, poisson, hits)
summary(mdl)
exp(confint(mdl, 'date'))
which.max(hits$visits)
hist[704,]
hits[704,]
lambda <- mdl$fitted.values[704]
qpois(0.95, lambda)
mdl2 <- glm(visits~date, hits, offset = log(visits+1))
a
mean
mdl2 <- glm(formula = simplystats ~ date, family = poisson, data = hits, offset = log(visits + 1))
qpois(0.95, mdl2$fitted.values[704])
swirl::delete_progress(luis)
swirl::delete_progress("luis")
swirl()
exit
q()
install.packages("caret")
library(caret)
library("hmisc")
library("Hmisc")
install.packages("Hmisc")
install.packages("Hmisc")
library(Hmisc)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
install.packages("AppliedPredictiveModeling")
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(predictors)
trainIndex = createDataPartition(diagnosis,p=0.5,list=FALSE)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
adData = data.frame(predictors)
head(adData)
trainIndex = createDataPartition(diagnosis,p=0.5,list=FALSE)
library(caret)
trainIndex = createDataPartition(diagnosis,p=0.5,list=FALSE)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
head(training)
?createDataPartition
adData = data.frame(diagnosis,predictors)
names(adData)
head(adData[1,])
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
names(training)
library(tidyr)
?gather
stocks <- data_frame(
time = as.Date('2009-01-01') + 0:9,
X = rnorm(10, 0, 1),
Y = rnorm(10, 0, 2),
Z = rnorm(10, 0, 4)
)
stocks <- data.frame(
time = as.Date('2009-01-01') + 0:9,
X = rnorm(10, 0, 1),
Y = rnorm(10, 0, 2),
Z = rnorm(10, 0, 4)
)
stocks
gather(stocks, stock, price, -time)
tr.train <- gather(training, descrip, val, -CompressiveStrength)
tr.train
head(tr.train)
ggplot(tr.train, aes(CompressiveStrength, colour = descrip)) + geom_jitter()
ggplot(tr.train, aes(CompressiveStrength, colour = descrip)) + geom_point()
ggplot(tr.train, aes(x=CompressiveStrength,y=Index, colour = descrip)) + geom_point()
ggplot(tr.train, aes(x=CompressiveStrength,y=index, colour = descrip)) + geom_point()
ggplot(training, aes(CompressiveStrength)) + geom_point()
qplot(CompressiveStrength, data = training)
qplot(CompressiveStrength, data = training) + geom_point()
plot(training$CompressiveStrength)
head(training)
training$index <- nrow(training)
head(training)
training$index <- row(training)
head(training)
training = mixtures[ inTrain,]
training$index <- seq(1:nrow(training))
head(training)
ggplot(data = training, aes(x=index, y=CompressiveStrength))
ggplot(data = training, aes(x=index, y=CompressiveStrength))+geom_point()
tr.train <- gather(training, descrip, value, 1:8)
head(tr.train)
ggplot(data = training, aes(x=index, y=CompressiveStrength))+geom_point()
ggplot(data = tr.train, aes(x=index, y=CompressiveStrength))+geom_point()
ggplot(data = tr.train, aes(x=index, y=CompressiveStrength, colour = descrip))+geom_point()
library(dplyr)
ggplot(data = training%>%select(index,CompressiveStrength,Age), aes(x=index, y=CompressiveStrength))+geom_point()
ggplot(data = training, aes(x=index, y=CompressiveStrength))+geom_point()
Cage <- cut2(training$Age,g=10)
ggplot(data = training, aes(x=index, y=CompressiveStrength), colour = Cage)+geom_point()
?cut2
ggplot(data = training, aes(x=index, y=CompressiveStrength), colour = table(Cage))+geom_point()
table(Cage)
set.seed(1)
x <- runif(1000, 0, 100)
z <- cut2(x, c(10,20,30))
x
<
z
table(z)
table(Cage)
Cage <- cut2(training$Age,g=5)
table(Cage)
ggplot(data = training, aes(x=index, y=CompressiveStrength), colour = table(Cage))+geom_point()
tr.train <- training
tr.train
tr.train$cutAge <- cut2(tr.train$Age, g=10)
head(tr.train)
ggplot(data = tr.train, aes(y=CompressiveStrength, x = index, colour = cutAge)) + geom_point()
ggplot(data = tr.train, aes(y=CompressiveStrength, x = index, colour = cutAge)) + geom_point(size = 1)
ggplot(data = tr.train, aes(y=CompressiveStrength, x = index, colour = cutAge)) + geom_point(size = 2)
ggplot(data = tr.train, aes(y=CompressiveStrength, x = index, colour = cutAge)) + geom_point(size = 2, alpha = 0.5)
tr.train$cutAge <- cut2(tr.train$Age, g=5)
ggplot(data = tr.train, aes(y=CompressiveStrength, x = index, colour = cutAge)) + geom_point(size = 2, alpha = 0.5)
ncol(training)
names(training)
source('C:/Users/OPERACIONES/Datascience/proyectos/coursera/machine learnining/week2_plotting.R')
plotall
plotall()
source('C:/Users/OPERACIONES/Datascience/proyectos/coursera/machine learnining/week2_plotting.R')
plotall()
names(training[1])
source('C:/Users/OPERACIONES/Datascience/proyectos/coursera/machine learnining/week2_plotting.R')
plotall()
plotall()
?cut2
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
hist(training$Superplasticizer
hist(training$Superplasticizer)
hist(log(training$Superplasticizer))
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]training = adData[ inTrain,]
testing = adData[-inTrain,]
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]training = adData[ inTrain,]
testing = adData[-inTrain,]
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]training = adData[ inTrain,]
testing = adData[-inTrain,]
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
summary(training)
names(training)
names(training)%>%grep("IL")
grep(training, "IL")
grep("IL", names(training))
names(training[,grep("IL", names(training))])
names(training[,grep("^IL", names(training))])
names(training)
tr.train <- training%>%select(diagnosis, names(training[,grep("^IL", names(training))]))
tr.train <- training[,c(1,grep("^IL", names(training)))]
names(tr.train)
head(tr.train)
preProcess(diagnosis.~)
?preProcess
preProcess(tr.train, method = "pca")
expl <- preProcess(tr.train, method = "pca")
summary(expl)
?preProcess
expl
expl$pcaComp
expl$data
print(expl)
transf <- predict(expl, tr.train)
summary(transf)
names(expl)
names(expl$pcaComp)
expl$pcaComp
summary(expl$pcaComp)
str(expl)
expl <- preProcess(tr.train, method = "pca", thresh=0.8)
summary(expl)
expl
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
tr.train <- training[,c(1,grep("^IL", names(training)))]
head(tr.train)
nonPCA <- train(diagnosis~.,method = "glm")
nonPCA <- train(data = tr.train, diagnosis~.,method = "glm")
?train
nonPCA <- train(tr.train$diagnosis~., method="glm")
nonPCA <- train(data=tr.train, diagnosis~., method = "glm")
nonPCA <- train(data=tr.train, diagnosis, method = "glm")
nonPCA <- train(tr.train, diagnosis, method = "glm")
head(tr.train)
nonPCA <- train(tr.train, tr.train$diagnosis, method = "glm")
install.packages("e1071")
nonPCA <- train(tr.train, tr.train$diagnosis, method = "glm")
warnings()
nonPCA
SummarynonPCA
summary(nonPCA)
nonPCA <- train(tr.train, diagnosis, method = "glm")
nonPCA <- train(tr.train, form = diagnosis~., method = "glm")
nonPCA <- train(data = tr.train, form = diagnosis~., method = "glm")
nonPCA$finalModel
nonPCA$results
nonPCA
nonPCA <- train(tr.train, diagnosis, method = "glm")
nonPCA <- train(tr.train, method = "glm")
nonPCA <- train(data= tr.train, method = "glm")
nonPCA <- train(data= tr.train, diagnosis, method = "glm")
nonPCA <- train(data= tr.train, y=diagnosis, method = "glm")
nonPCA <- train(data= tr.train, x=diagnosis, method = "glm")
nonPCA <- train(data= tr.train, diagnosis~., method = "glm")
nonPCA
nonPCA <- train(data= tr.train, diagnosis~., method = "glm", preProcess(tr.train, method = "pca", thresh = 0.8))
PCA <- train(data= tr.train, diagnosis~., method = "glm", preProcess(tr.train, method = "pca", thresh = 0.8))
nonPCA <- train(data= tr.train, diagnosis~., method = "glm")
nonPCA
PCA <- train(data=tr.train, diagnosis~., method="glm", preProcess("pca", thresh = 0.8))
PCA <- train(data=tr.train, diagnosis~., method="glm", preProcess(tr.train, "pca", thresh = 0.8))
expl <- preProcess(tr.train, method = "pca", thresh=0.8)
PCA <- train(data=tr.train, diagnosis~., method="glm", preProcess(expl))
?trainControl
prec <- trainControl(preProcOptions = list(thresh = 0.8, method = "pca"))
prec <- trainControl(method = "pca", preProcOptions = list(thresh = 0.8))
PCA <- train(data=tr.train, diagnosis~., method="glm", preProcess(prec))
nonPCA <- train(data= tr.train, diagnosis~., method = "glm", thresh =0.8)
nonPCA <- train(data= tr.train, diagnosis~., method = "glm", preProcess(thresh =0.8))
nonPCA <- train(data= tr.train, diagnosis~., method = "glm", preProcess(preProcptions=list(thresh =0.8)))
ctrl <- trainControl(preProcOptions = list(thresh = 0.95))
ctrl <- trainControl(preProcOptions = list(thresh = 0.8))
nonPCA <- train(data= tr.train, diagnosis~., method = "glm", preProcess(crtl))
nonPCA <- train(data= tr.train, diagnosis~., method = "glm", trControl =crtl)
nonPCA <- train(data= tr.train, diagnosis~., method = "glm", preProcess(crtl))
expl
PCA <- train(expl, diagnosis~., method = "glm")
train.std <- predict(expl, tr.train)
head(train.std)
?trcontrol
?train
nonPCA
predict(expl, testing)
summary(predict(expl, testing))
predNONPCA <- predict(expl, testing)
predNONPCA
confusionMatrix(predNONPCA)
predNONPCA <- predict(expl, newdata = testing)
confusionMatrix(predNONPCA, testing$diagnosis)
nonPCA <- train(data= tr.train, diagnosis~., method = "glm")
predNONPCA <- predict(nonPCA, newdata = testing)
confusionMatrix(predNONPCA, testing$diagnosis)
source('C:/Users/OPERACIONES/Datascience/proyectos/coursera/machine learnining/week2_plotting.R')
PCA <- train(data= tr.train, diagnosis~., method = "glm", preProcess="pca",
trControl = trainControl(preProcOptions = list(thresh = 0.8)))
predPCA <- predict(nonPCA, newdata = testing)
confusionMatrix(predPCA, testing$diagnosis)
PCA <- train(data= tr.train, diagnosis~., method = "glm", preProcess="pca",
trControl = trainControl(preProcOptions = list(thresh = 0.8)))
predPCA <- predict(PCA, newdata = testing)
confusionMatrix(predPCA, testing$diagnosis)
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
hist(training)
hist(training$Superplasticizer)
log(0)
hist(log(training$Superplasticizer))
hist(log(training$Superplasticizer+1))
source('C:/Users/OPERACIONES/Datascience/proyectos/coursera/machine learnining/week2_plotting.R')
source('C:/Users/OPERACIONES/Datascience/proyectos/coursera/machine learnining/week2_plotting.R')
shiny::runApp('~/Perugia/modelos-criticos')
runApp('~/Perugia/modelos-criticos')
runApp('~/Perugia/modelos-criticos')
runApp('~/Perugia/modelos-criticos')
runApp('~/Perugia/modelos-criticos')
runApp('~/Perugia/modelos-criticos')
runApp('~/Perugia/modelos-criticos')
runApp('~/Perugia/modelos-criticos')
?geom_point
runApp('~/Perugia/modelos-criticos')
runApp('~/Perugia/modelos-criticos')
runApp('~/Perugia/modelos-criticos')
a <- c("a","b")
length(a)
runApp('~/Perugia/modelos-criticos')
runApp('~/Perugia/modelos-criticos')
runApp('~/Perugia/modelos-criticos')
dev.off()
runApp('~/Perugia/modelos-criticos')
runApp('~/Perugia/modelos-criticos')
runApp('~/Perugia/modelos-criticos')
runApp('~/Perugia/modelos-criticos')
runApp('~/Perugia/modelos-criticos')
runApp('~/Perugia/modelos-criticos')
runApp('~/Perugia/modelos-criticos')
runApp('~/Perugia/modelos-criticos')
runApp('~/Perugia/modelos-criticos')
runApp('~/Perugia/modelos-criticos')
runApp('~/Perugia/modelos-criticos')
runApp('~/Perugia/modelos-criticos')
runApp('~/Perugia/modelos-criticos')
shiny::runApp('~/Perugia/modelos-criticos')
runApp('~/Perugia/modelos-criticos')
dev.off()
runApp('~/Perugia/modelos-criticos')
runApp('~/Perugia/modelos-criticos')
runApp('~/Perugia/modelos-criticos')
runApp('~/Perugia/modelos-criticos')
runApp('~/Perugia/modelos-criticos')
runApp('~/Perugia/modelos-criticos')
runApp('~/Perugia/modelos-criticos')
runApp('~/Perugia/modelos-criticos')
runApp('~/Perugia/modelos-criticos')
runApp('~/Perugia/modelos-criticos')
runApp('~/Perugia/modelos-criticos')
runApp('~/Perugia/modelos-criticos')
runApp('~/Perugia/modelos-criticos')
runApp('~/Perugia/modelos-criticos')
runApp('~/Perugia/modelos-criticos')
runApp('~/Perugia/modelos-criticos')
runApp('~/Perugia/modelos-criticos')
runApp('~/Perugia/modelos-criticos')
runApp('~/Perugia/modelos-criticos')
runApp('~/Perugia/modelos-criticos')
runApp('~/Perugia/modelos-criticos')
shiny::runApp('~/Perugia/modelos-criticos')
shiny::runApp('~/Perugia/modelos-criticos')
runApp('~/Perugia/modelos-criticos')
runApp('~/Perugia/modelos-criticos')
runApp('~/Perugia/modelos-criticos')
runApp('~/Perugia/modelos-criticos')
runApp('~/Perugia/modelos-criticos')
runApp('~/Perugia/modelos-criticos')
runApp('~/Perugia/modelos-criticos')
setwd("~/Perugia/modelos-criticos")
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
scale_color_discrete()
?scale_color_discrete()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
View(f.plot)
View(quant)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
View(produccion.promedio)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
