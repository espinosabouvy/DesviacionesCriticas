nonPCA
nonPCA <- train(data= tr.train, diagnosis~., method = "glm", preProcess(tr.train, method = "pca", thresh = 0.8))
PCA <- train(data= tr.train, diagnosis~., method = "glm", preProcess(tr.train, method = "pca", thresh = 0.8))
nonPCA <- train(data= tr.train, diagnosis~., method = "glm")
nonPCA
PCA <- train(data=tr.train, diagnosis~., method="glm", preProcess("pca", thresh = 0.8))
PCA <- train(data=tr.train, diagnosis~., method="glm", preProcess(tr.train, "pca", thresh = 0.8))
expl <- preProcess(tr.train, method = "pca", thresh=0.8)
PCA <- train(data=tr.train, diagnosis~., method="glm", preProcess(expl))
?trainControl
prec <- trainControl(preProcOptions = list(thresh = 0.8, method = "pca"))
prec <- trainControl(method = "pca", preProcOptions = list(thresh = 0.8))
PCA <- train(data=tr.train, diagnosis~., method="glm", preProcess(prec))
nonPCA <- train(data= tr.train, diagnosis~., method = "glm", thresh =0.8)
nonPCA <- train(data= tr.train, diagnosis~., method = "glm", preProcess(thresh =0.8))
nonPCA <- train(data= tr.train, diagnosis~., method = "glm", preProcess(preProcptions=list(thresh =0.8)))
ctrl <- trainControl(preProcOptions = list(thresh = 0.95))
ctrl <- trainControl(preProcOptions = list(thresh = 0.8))
nonPCA <- train(data= tr.train, diagnosis~., method = "glm", preProcess(crtl))
nonPCA <- train(data= tr.train, diagnosis~., method = "glm", trControl =crtl)
nonPCA <- train(data= tr.train, diagnosis~., method = "glm", preProcess(crtl))
expl
PCA <- train(expl, diagnosis~., method = "glm")
train.std <- predict(expl, tr.train)
head(train.std)
?trcontrol
?train
nonPCA
predict(expl, testing)
summary(predict(expl, testing))
predNONPCA <- predict(expl, testing)
predNONPCA
confusionMatrix(predNONPCA)
predNONPCA <- predict(expl, newdata = testing)
confusionMatrix(predNONPCA, testing$diagnosis)
nonPCA <- train(data= tr.train, diagnosis~., method = "glm")
predNONPCA <- predict(nonPCA, newdata = testing)
confusionMatrix(predNONPCA, testing$diagnosis)
source('C:/Users/OPERACIONES/Datascience/proyectos/coursera/machine learnining/week2_plotting.R')
PCA <- train(data= tr.train, diagnosis~., method = "glm", preProcess="pca",
trControl = trainControl(preProcOptions = list(thresh = 0.8)))
predPCA <- predict(nonPCA, newdata = testing)
confusionMatrix(predPCA, testing$diagnosis)
PCA <- train(data= tr.train, diagnosis~., method = "glm", preProcess="pca",
trControl = trainControl(preProcOptions = list(thresh = 0.8)))
predPCA <- predict(PCA, newdata = testing)
confusionMatrix(predPCA, testing$diagnosis)
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
hist(training)
hist(training$Superplasticizer)
log(0)
hist(log(training$Superplasticizer))
hist(log(training$Superplasticizer+1))
source('C:/Users/OPERACIONES/Datascience/proyectos/coursera/machine learnining/week2_plotting.R')
source('C:/Users/OPERACIONES/Datascience/proyectos/coursera/machine learnining/week2_plotting.R')
setwd("~/Perugia/modelos-criticos")
source('~/Perugia/modelos-criticos/script.R')
preparar()
source('~/Perugia/modelos-criticos/script.R')
source('~/Perugia/modelos-criticos/script.R')
preparar()
head(tiempos.raw)
unique(tiempos.raw$ESTILO, tiempos.raw$FAMPESP)
source('~/Perugia/modelos-criticos/script.R')
unique(tiempos.raw$DEPTO)
tiempos.raw[tiempos.raw$DEPTO == "FAMILIA",2:3]
unique(tiempos.raw[tiempos.raw$DEPTO == "FAMILIA",2:3])
estilos.fam <- unique(tiempos.raw[tiempos.raw$DEPTO == "FAMILIA",2:3])
source('~/Perugia/modelos-criticos/script.R')
a <- merge(estilos.fam, tiempos.raw, by = c("ESTILO", "FAMPESP"), all.x = T)
head(a)
a <- merge(estilos.fam, tiempos.raw, by = c("ESTILO", "FAMPESP"), all = T)
b<- spread(tiempos.raw, FUNCION, TIEMPO, -2)
b<- spread(tiempos.raw, FUNCION, TIEMPO, -1:2)
b<- spread(tiempos.raw, FUNCION, TIEMPO)
?spread
b<- spread(tiempos.raw, FUNCION, TIEMPO, fill = 0)
tiempos.raw[214:215,]
tiempos.funcion <<- tiempos.raw%>%
select(DEPTO, ESTILO, FAMPESP, FUNCION, TIEMPO)%>%
group_by(DEPTO, ESTILO, FAMPESP, FUNCION)%>%
summarise("TIEMPO" = sum(TIEMPO))%>%
spread(FUNCION,TIEMPO)
head(tiempos.funcion)
tiempos.funcion <<- tiempos.raw%>%
select(DEPTO, ESTILO, FAMPESP, FUNCION, TIEMPO)%>%
group_by(DEPTO, ESTILO, FAMPESP, FUNCION)%>%
summarise("TIEMPO" = sum(TIEMPO))%>%
spread(FUNCION,TIEMPO, fill = 0, drop = FALSE)
head(tiempos.funcion)
table(tiempos.funcion$DEPTO)
head(tiempos.funcion,20)
complete.cases(tiempos.funcion)
tiempos.funcion <<- tiempos.raw%>%
select(DEPTO, ESTILO, FAMPESP, FUNCION, TIEMPO)%>%
group_by(DEPTO, ESTILO, FAMPESP, FUNCION)%>%
summarise("TIEMPO" = sum(TIEMPO))%>%
spread(FUNCION,TIEMPO, drop = FALSE)
complete.cases(tiempos.funcion)
?assign
source('~/Perugia/modelos-criticos/script.R')
source('~/Perugia/modelos-criticos/script.R')
source('~/Perugia/modelos-criticos/script.R')
for(i in unique(tiempos.raw$DEPTO)){
assign(i,tiempos.raw%>%
filter(DEPTO == i)%>%
select(ESTILO, FAMPESP, FUNCION, TIEMPO)%>%
group_by(ESTILO, FAMPESP, FUNCION)%>%
summarise("TIEMPO" = sum(TIEMPO))%>%
spread(FUNCION,TIEMPO, fill = 0, drop = FALSE), envir = .GlobalEnv)
}
CORTE
complete.cases(CORTE)
source('~/Perugia/modelos-criticos/script.R')
for(i in unique(tiempos.raw$DEPTO)){
assign(i,tiempos.raw%>%
filter(DEPTO == i)%>%
select(ESTILO, FAMPESP, FUNCION, TIEMPO)%>%
group_by(ESTILO, FAMPESP, FUNCION)%>%
summarise("TIEMPO" = sum(TIEMPO))%>%
spread(FUNCION,TIEMPO, drop = FALSE), envir = .GlobalEnv)
}
complete.cases(CORTE)
CORTE[complete.cases(CORTE),]
table(tiempos.raw$DEPTO)
unique(tiempos.raw[tiempos.raw$DEPTO == "CORTE",]$ESTILO)
unique(tiempos.raw[tiempos.raw$DEPTO == "FORRADOS",]$ESTILO)
FAMILIA
source('~/Perugia/modelos-criticos/script.R')
for(i in unique(tiempos.raw$DEPTO)){
assign(i,tiempos.raw%>%
filter(DEPTO == i)%>%
select(ESTILO, FUNCION, TIEMPO)%>%
group_by(ESTILO, FAMPESP, FUNCION)%>%
summarise("TIEMPO" = sum(TIEMPO))%>%
spread(FUNCION,TIEMPO, drop = FALSE), envir = .GlobalEnv)
}
source('~/Perugia/modelos-criticos/script.R')
for(i in unique(tiempos.raw$DEPTO)){
assign(i,tiempos.raw%>%
filter(DEPTO == i)%>%
select(ESTILO, FUNCION, TIEMPO)%>%
group_by(ESTILO, FUNCION)%>%
summarise("TIEMPO" = sum(TIEMPO))%>%
spread(FUNCION,TIEMPO, drop = FALSE), envir = .GlobalEnv)
}
CORTE
unique(CORTE$ESTILO)
unique(PLANTA$ESTILO)
source('~/Perugia/modelos-criticos/script.R')
source('~/Perugia/modelos-criticos/script.R')
preparar()
preparar()
debugSource('~/Perugia/modelos-criticos/script.R')
source('~/Perugia/modelos-criticos/script.R')
preparar()
tiempos
estilos.fam
estilos.fam <- unique(tiempos.raw[tiempos.raw$DEPTO == "FAMILIA",2:3])
estilos.fam
unique(tiempos$DEPTO)
for(i in unique(tiempos$DEPTO)){
temp <- tiempos%>%
filter(DEPTO == i)%>%
select(ESTILO, FUNCION, TIEMPO)%>%
group_by(ESTILO, FUNCION)%>%
summarise("TIEMPO" = sum(TIEMPO))%>%
spread(FUNCION,TIEMPO, drop = FALSE)
temp1 <- merge(estilos.fam, temp, by = "ESTILO")
write.csv(temp1, paste0(i, ".csv"), row.names = F)
}
source('~/Perugia/modelos-criticos/script.R')
preparar()
source('~/Perugia/modelos-criticos/script.R')
preparar()
preparar()
source('~/Perugia/modelos-criticos/script.R')
preparar()
source('~/Perugia/modelos-criticos/script.R')
preparar()
shiny::runApp()
source('~/Perugia/modelos-criticos/script.R')
preparar()
temp1
gather(temp1, "PUESTO","TIEMPO",c(1:2))
gather(temp1, "PUESTO","TIEMPO")
head(temp1)
gather(temp1, "PUESTO","TIEMPO", 3:ncol(temp1))
runApp()
runApp()
runApp()
TEMP1
temp1
f.plot <- temp1%>%filter(LINEA = 1)%>%gather("PUESTO","TIEMPO", 3:ncol(temp1))
f.plot <- temp1%>%filter(LINEA == 1)%>%gather("PUESTO","TIEMPO", 3:ncol(temp1))
f.plot <- temp1%>%filter(FAMPESP == 1)%>%gather("PUESTO","TIEMPO", 3:ncol(temp1))
f.plot
head(temp1)
medias <- f.plot%>%group_by(PUESTO)%>%summarise("Prom" = mean(TIEMPO))
medias
medias <- temp1%>%filter(FAMPESP == 1)%>%gather("PUESTO","TIEMPO", 3:ncol(temp1))%>%group_by(PUESTO)%>%summarise("Prom" = mean(TIEMPO))
medias
f.plot%>%group_by(PUESTO)%>%summarise("Q1" = quantile())
f.plot%>%group_by(PUESTO)%>%summarise("Q1" = quantile(TIEMPO))
head(f.plot)
f.plot%>%group_by(PUESTO)%>%summarise("Q1" = quantile(TIEMPO, probs = 0.1))
f.plot%>%group_by(PUESTO)%>%summarise("Q1" = quantile(TIEMPO, probs = 0.1), "Q4" = quantile(TIEMPO, probs = 0.9))
medias
head(temp1)
f.plot
quant <- f.plot%>%group_by(PUESTO)%>%summarise("Q1" = quantile(TIEMPO, probs = 0.1), "Q4" = quantile(TIEMPO, probs = 0.9))
a<- merge(f.plot, quant, by = "PUESTO")
head(a)
a<- merge(f.plot, quant, by = "PUESTO")%>%mutate(ifelse(TIEMPO < Q1 | TIEMPO > Q4,"OUTLIER","LIMITS"))
head(a)
a<- merge(f.plot, quant, by = "PUESTO")%>%mutate("OUTLIER" = ifelse(TIEMPO < Q1 | TIEMPO > Q4,TRUE,FALSE))
head(a)
sum(a$OUTLIER)
runApp()
runApp()
runApp()
a
a<- merge(f.plot, quant, by = "PUESTO")%>%mutate("CRITICO" = ifelse(TIEMPO < Q1 | TIEMPO > Q4,"DESVIACION","NORMAL"))
a
b <- group_by(ESTILO)%>%summarise("CRITICO" = sum(ifelse(CRITICO == "DESVIACION",1,0))
b <- group_by(ESTILO)%>%summarise("CRITICO" = sum(ifelse(CRITICO == "DESVIACION",1,0)))
b <- a%>%group_by(ESTILO)%>%summarise("CRITICO" = sum(ifelse(CRITICO == "DESVIACION",1,0)))
head(b)
n(unique(a$PUESTO))
dim(unique(a$PUESTO))
lenght(unique(a$PUESTO))
length(unique(a$PUESTO))
f.plot
quant <- f.plot%>%
group_by(PUESTO)%>%
summarise("Promedio" = mean(TIEMPO),
"Q1" = quantile(TIEMPO, probs = quant/100),
"Q4" = quantile(TIEMPO, probs = 1-(quant/100)),
"Dist" = sqrt((Promedio-TIEMPO)^2))
quant <- f.plot%>%
group_by(PUESTO)%>%
summarise("Promedio" = mean(TIEMPO),
"Q1" = quantile(TIEMPO, probs = quant/100),
"Q4" = quantile(TIEMPO, probs = 1-(quant/100))
quant <- f.plot%>%
group_by(PUESTO)%>%
summarise("Promedio" = mean(TIEMPO),
"Q1" = quantile(TIEMPO, probs = quant/100),
"Q4" = quantile(TIEMPO, probs = 1-(quant/100)))
head(f.plot)
quant = 10
limites = 10
quant <- f.plot%>%
group_by(PUESTO)%>%
summarise("Promedio" = mean(TIEMPO),
"Q1" = quantile(TIEMPO, probs = limites/100),
"Q4" = quantile(TIEMPO, probs = 1-(limites/100)),
"Dist" = sqrt((Promedio-TIEMPO)^2))
quant <- f.plot%>%
group_by(PUESTO)%>%
summarise("Promedio" = mean(TIEMPO),
"Q1" = quantile(TIEMPO, probs = limites/100),
"Q4" = quantile(TIEMPO, probs = 1-(limites/100))
"Dist" = sqrt((Promedio-TIEMPO)^2)))
quant <- f.plot%>%
group_by(PUESTO)%>%
summarise("Promedio" = mean(TIEMPO),
"Q1" = quantile(TIEMPO, probs = limites/100),
"Q4" = quantile(TIEMPO, probs = 1-(limites/100)))
quant
quant <- f.plot%>%
group_by(PUESTO)%>%
summarise("Promedio" = mean(TIEMPO),
"Q1" = quantile(TIEMPO, probs = limites/100),
"Q4" = quantile(TIEMPO, probs = 1-(limites/100)),
"Distancia" = sqrt((Promedio-TIEMPO)^2))
quant <- f.plot%>%
group_by(PUESTO)%>%
summarise("Promedio" = mean(TIEMPO),
"Q1" = quantile(TIEMPO, probs = limites/100),
"Q4" = quantile(TIEMPO, probs = 1-(limites/100)))%>%
mutate("Distancia" = sqrt((Promedio-TIEMPO)^2))
quant
quant <- f.plot%>%
group_by(PUESTO)%>%
summarise("Promedio" = mean(TIEMPO),
"Q1" = quantile(TIEMPO, probs = limites/100),
"Q4" = quantile(TIEMPO, probs = 1-(limites/100)))%>%
summarise("Distancia" = sqrt((Promedio-TIEMPO)^2))
quant <- f.plot%>%
group_by(PUESTO)%>%
summarise("Promedio" = mean(TIEMPO),
"Q1" = quantile(TIEMPO, probs = limites/100),
"Q4" = quantile(TIEMPO, probs = 1-(limites/100)),
"Distancia" = sqrt((Promedio-TIEMPO)^2))
quant <- f.plot%>%
group_by(PUESTO)%>%
summarise("Promedio" = mean(TIEMPO),
"Q1" = quantile(TIEMPO, probs = limites/100),
"Q4" = quantile(TIEMPO, probs = 1-(limites/100)))
for.plot <- merge(f.plot, quant, by = "PUESTO")%>%
mutate("CRITICO" = ifelse(TIEMPO < Q1 | TIEMPO > Q4,"DESVIACION","NORMAL"))
for.plot
for.plot <- merge(f.plot, quant, by = "PUESTO")%>%
mutate("Distancia" = sqrt((Promedio-TIEMPO)^2),
"CRITICO" = ifelse(TIEMPO < Q1 | TIEMPO > Q4,"DESVIACION","NORMAL"))
head(for.plot)
for.plot
for.plot%>%group_by(ESTILO)%>%summarise("Dist.Total" = sum(Distancia))
f.plot
f.plot <- merge(f.plot, quant, by = "PUESTO")%>%
mutate("Distancia" = sqrt((Promedio-TIEMPO)^2),
"Dist.total" = group_by(ESTILO)%>%summarise("Dist.Total" = sum(Distancia)),
"CRITICO" = ifelse(TIEMPO < Q1 | TIEMPO > Q4,"DESVIACION","NORMAL"))
f.plot <- merge(f.plot, quant, by = "PUESTO")%>%
mutate("Distancia" = sqrt((Promedio-TIEMPO)^2))%>%
mutate("Dist.total" = group_by(ESTILO)%>%summarise("Dist.Total" = sum(Distancia)),
"CRITICO" = ifelse(TIEMPO < Q1 | TIEMPO > Q4,"DESVIACION","NORMAL"))
for.plot <- merge(f.plot, quant, by = "PUESTO")%>%
mutate("Distancia" = sqrt((Promedio-TIEMPO)^2))%>%
mutate("Dist.total" = group_by(ESTILO)%>%summarise("Dist.Total" = sum(Distancia)),
"CRITICO" = ifelse(TIEMPO < Q1 | TIEMPO > Q4,"DESVIACION","NORMAL"))
for.plot <- merge(f.plot, quant, by = "PUESTO")%>%
mutate("Distancia" = sqrt((Promedio-TIEMPO)^2))
for.plot
f.plot <- merge(f.plot, quant, by = "PUESTO")%>%
mutate("Distancia" = sqrt((Promedio-TIEMPO)^2))
f.plot
f.plot <- merge(f.plot, quant, by = "PUESTO")%>%
mutate("Distancia" = sqrt((Promedio-TIEMPO)^2))
dist.total <- f.plot%>%group_by(ESTILO)%>%summarise("Dist.Total" = sum(Distancia))
f.plot
quant <- f.plot%>%
group_by(PUESTO)%>%
summarise("Promedio" = mean(TIEMPO),
"Q1" = quantile(TIEMPO, probs = limites/100),
"Q4" = quantile(TIEMPO, probs = 1-(limites/100)))
f.plot <- merge(f.plot, quant, by = "PUESTO")%>%
mutate("Distancia" = sqrt((Promedio-TIEMPO)^2))
temp1
f.plot <- temp1%>%filter(LINEA == linea)%>%
gather("PUESTO","TIEMPO",3:ncol(temp1))
f.plot <- temp1%>%filter(LINEA == 1)%>%
gather("PUESTO","TIEMPO",3:ncol(temp1))
temp1
f.plot <- temp1%>%filter(FAMPESP == 1)%>%
gather("PUESTO","TIEMPO",3:ncol(temp1))
quant <- f.plot%>%
group_by(PUESTO)%>%
summarise("Promedio" = mean(TIEMPO),
"Q1" = quantile(TIEMPO, probs = limites/100),
"Q4" = quantile(TIEMPO, probs = 1-(limites/100)))
f.plot <- merge(f.plot, quant, by = "PUESTO")%>%
mutate("Distancia" = sqrt((Promedio-TIEMPO)^2))
dist.total <- f.plot%>%group_by(ESTILO)%>%summarise("Dist.Total" = sum(Distancia))
f.plot
f.plot <- temp1%>%filter(FAMPESP == 1)%>%
gather("PUESTO","TIEMPO",3:ncol(temp1))
quant <- f.plot%>%
group_by(PUESTO)%>%
summarise("Promedio" = mean(TIEMPO),
"Q1" = quantile(TIEMPO, probs = limites/100),
"Q4" = quantile(TIEMPO, probs = 1-(limites/100)))
temp <- merge(f.plot, quant, by = "PUESTO")%>%
mutate("Distancia" = sqrt((Promedio-TIEMPO)^2))
dist.total <- temp%>%group_by(ESTILO)%>%summarise("Dist.Total" = sum(Distancia))
temp
dist.total
for.plot <- merge(f.plot, dist.total, by = "ESTILO")
for.plot
for.plot <- merge(temp, dist.total, by = "ESTILO")
for.plot
dist.total
dist.total <- temp%>%group_by(ESTILO)%>%summarise("Distancia" = sum(Distancia))
dist.total
critico <- dist.total%>%
summarise("Q1" = quantile(Distancia, probs = limites/100),
"Q4" = quantile(Distancia, probs = 1-(limites/100)))%>%
mutate("CRITICO" = ifelse(Distancia < Q1 | Distancia > Q4, "CRITICO", "NORMAL"))
dist.total
critico <- dist.total%>%
summarise("Q1" = quantile(Distancia, probs = limites/100),
"Q4" = quantile(Distancia, probs = 1-(limites/100)))
critico
critico <- dist.total%>%
mutate("Q1" = quantile(Distancia, probs = limites/100),
"Q4" = quantile(Distancia, probs = 1-(limites/100)))
critico
critico <- dist.total%>%
mutate("Q1" = quantile(Distancia, probs = limites/100),
"Q4" = quantile(Distancia, probs = 1-(limites/100)),
"CRITICO" = ifelse(Distancia < Q1 | Distancia > Q4, "CRITICO", "NORMAL"))
critico
critico <- dist.total%>%
mutate("Q1" = quantile(Distancia, probs = limites/100),
"Q4" = quantile(Distancia, probs = 1-(limites/100)),
"CRITICO" = ifelse(Distancia < Q1 | Distancia > Q4, "CRITICO", "NORMAL"))%>%
select(ESTILO, CRITICO)
critico
temp
runApp()
runApp()
critico
for.plot
for.plot <- merge(temp, critico, by = "ESTILO")%>%
mutate("DESVIACION" = ifelse(CRITICO == "CRITICO", "CRITICO",
ifelse(TIEMPO < Q1 | TIEMPO > Q4,"FUERA","NORMAL")))
for.plot
temp1 <- read.csv("FAMILIA.CSV")
f.plot <- temp1%>%filter(FAMPESP == 1)%>%
gather("PUESTO","TIEMPO",3:ncol(temp1))
quant <- f.plot%>%
group_by(PUESTO)%>%
summarise("Promedio" = mean(TIEMPO),
"Q1" = quantile(TIEMPO, probs = limites/100),
"Q4" = quantile(TIEMPO, probs = 1-(limites/100)))
temp <- merge(f.plot, quant, by = "PUESTO")%>%
mutate("Distancia" = sqrt((Promedio-TIEMPO)^2))
#distancia maxima, tomando en cuanta todas las fracciones (critico)
critico <- temp%>%
group_by(ESTILO)%>%
summarise("Distancia" = sum(Distancia))%>%
mutate("Q1" = quantile(Distancia, probs = limites/100),
"Q4" = quantile(Distancia, probs = 1-(limites/100)),
"CRITICO" = ifelse(Distancia < Q1 | Distancia > Q4, "CRITICO", "NORMAL"))%>%
select(ESTILO, CRITICO)
for.plot <- merge(temp, critico, by = "ESTILO")%>%
mutate("DESVIACION" = ifelse(CRITICO == "CRITICO", "CRITICO",
ifelse(TIEMPO < Q1 | TIEMPO > Q4,"FUERA","NORMAL")))
for.plot
runApp()
runApp()
View(critico)
critico <- temp%>%
group_by(ESTILO)%>%
summarise("Distancia" = sum(Distancia))%>%
mutate("Q1" = quantile(Distancia, probs = limites/100),
"Q4" = quantile(Distancia, probs = 1-(limites/100)),
"CRITICO" = ifelse(Distancia < Q1 | Distancia > Q4, "CRITICO", "NORMAL"))
critico
runApp()
runApp()
?FacetGrid
?facet_grid
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
for.plot
mejora <- for.plot%>%
filter(CRITICO != "CRITICO")%>%
select(ESTILO, LINEA, PUESTO, TIEMPO)%>%
group_by(LINEA, PUESTO)%>%
summarise("Prom" = ceiling(mean(TIEMPO)),
"Mini" = min(TIEMPO) ,
"Maxi" = max(TIEMPO))%>%
group_by(LINEA)%>%
summarise("Promedio" = sum(Prom),
"Minimo" = sum(Mini),
"Maximo" = sum(Maxi),
"NvaDesviacion" = round((Maximo-Minimo)/Promedio*100,2))
mejora <- for.plot%>%
filter(CRITICO != "CRITICO")%>%
select(ESTILO, "LINEA" = FAMPESP, PUESTO, TIEMPO)%>%
group_by(LINEA, PUESTO)%>%
summarise("Prom" = ceiling(mean(TIEMPO)),
"Mini" = min(TIEMPO) ,
"Maxi" = max(TIEMPO))%>%
group_by(LINEA)%>%
summarise("Promedio" = sum(Prom),
"Minimo" = sum(Mini),
"Maximo" = sum(Maxi),
"NvaDesviacion" = round((Maximo-Minimo)/Promedio*100,2))
mejora
mejora <- for.plot%>%
filter(CRITICO != "CRITICO")%>%
select(ESTILO, "LINEA" = FAMPESP, PUESTO, TIEMPO)%>%
group_by(LINEA, PUESTO)%>%
summarise("Prom" = ceiling(mean(TIEMPO)),
"Mini" = min(TIEMPO) ,
"Maxi" = max(TIEMPO))%>%
group_by(LINEA)%>%
summarise("Promedio" = sum(Prom),
"Minimo" = sum(Mini),
"Maximo" = sum(Maxi),
"NvaDesviacion" = round((Maximo-Minimo)/Promedio*100,2))%>% select(NvaDesviacion)
mejora
str(mejora)
mejora[1]
as.numeric(mejora)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
